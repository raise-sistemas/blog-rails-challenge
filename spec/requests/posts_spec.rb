require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/posts", type: :request do
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      title: "Title Ok",
      body: "Body Ok",
    }
  }

  let(:invalid_attributes) {
    {
      title: "",
      body: "",
    }
  }

  describe "GET /" do
    it "renders a successful response" do
      get root_url
      expect(response).to be_successful
    end
  end

  describe "GET /index" do
    before do
      posts = []
      (1..10).each do |value|
        posts << Post.new(title: "New Post #{value}", body: 'Content Body')
      end

      posts.each(&:save)
      get published_posts_url
    end

    context 'paginate' do
      it 'renders a successful response' do
        expect(response).to be_successful
      end
    end
  end

  describe "GET /posts/published" do
    it "renders a successful response" do
      get published_posts_url
      expect(response).to be_successful
    end

    context 'returns only published posts' do
      let(:posts) do
        [
          Post.new(title: 'New Post 1', body: 'Content Body'),
          Post.new(title: 'New Post 2', body: 'Content Body', status: :published),
          Post.new(title: 'New Post 3', body: 'Content Body'),
          Post.new(title: 'New Post 4', body: 'Content Body', status: :published)
        ]
      end

      before do
        posts.each(&:save)
        get published_posts_url
      end

      it { expect(response.body).to include('New Post 2') }
      it { expect(response.body).to include('New Post 4') }
      it { expect(response.body).to_not include('New Post 1') }
      it { expect(response.body).to_not include('New Post 3') }
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      post = Post.create! valid_attributes
      get post_url(post)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_post_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      post = Post.create! valid_attributes
      get edit_post_url(post)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Post" do
        expect {
          post posts_url, params: { post: valid_attributes }
        }.to change(Post, :count).by(1)
      end

      it "redirects to the created post" do
        post posts_url, params: { post: valid_attributes }
        expect(response).to redirect_to(post_url(Post.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Post" do
        expect {
          post posts_url, params: { post: invalid_attributes }
        }.to change(Post, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post posts_url, params: { post: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          title: "New title",
          body: "New Body",
        }
      }

      it "updates the requested post" do
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: new_attributes }
        post.reload
        expect(response).to redirect_to(post_url(post))
        expect(post.slice(:title, :body).symbolize_keys).to eq(new_attributes)
      end

      it "redirects to the post" do
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: new_attributes }
        post.reload
        expect(response).to redirect_to(post_url(post))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /posts/:id/publish' do
    context 'Post published successfully' do
      context 'change state Post to publish' do
        before do
          @date_time_current = DateTime.current.strftime('%F %T %z')
          allow(DateTime).to receive(:current).and_return(@date_time_current)
          @post = Post.create! valid_attributes
          patch publish_post_url(@post)
          @post.reload
        end
        
        it { expect(@post.status).to eq 'published' }
        it { expect(@post.published_at).to eq @date_time_current }
        it { expect(response).to have_http_status(:found) }
        it { expect(response).to redirect_to(published_posts_url) }
      end

      it 'update the requested post' do
        post = Post.create! valid_attributes
        expect { patch publish_post_url(post) }.to change(Post, :count).by(0)
      end    
    end

    context 'error when posting post' do
      before do
        @post = Post.create valid_attributes
        allow_any_instance_of(Post).to receive(:save).and_return(false)
        patch publish_post_url(@post)
      end

      it { expect(response).to redirect_to(edit_post_url(@post)) }
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested post" do
      post = Post.create! valid_attributes
      expect {
        delete post_url(post)
      }.to change(Post, :count).by(-1)
    end

    it "redirects to the posts list" do
      post = Post.create! valid_attributes
      delete post_url(post)
      expect(response).to redirect_to(posts_url)
    end
  end
end
